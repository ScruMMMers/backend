package com.quqee.backend.internship_hits.logs.mapper

import com.quqee.backend.internship_hits.logs.entity.LogEntity
import com.quqee.backend.internship_hits.model.rest.*
import org.springframework.stereotype.Component
import java.net.URI
import java.util.*

@Component
class LogMapper {

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ª–æ–≥–∞ –≤ DTO –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
     */
    fun toLogView(entity: LogEntity): LogView {
        return LogView(
            id = entity.id,
            message = entity.message,
            tags = getTagsForLog(entity.tagIds),
            type = entity.type,
            createdAt = entity.createdAt,
            editedAt = entity.editedAt,
            reactions = getReactionsForLog(entity.id),
            comments = getCommentsForLog(entity.id)
        )
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –ª–æ–≥–∞
     * –ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê
     */
    private fun getTagsForLog(tagIds: List<UUID>): List<TagView> {
        return tagIds.map { tagId ->
            TagView(
                id = tagId,
                name = "–¢–µ–≥ $tagId",
                shortCompany = ShortCompanyView(
                    companyId = UUID.randomUUID(),
                    name = "–ö–æ–º–ø–∞–Ω–∏—è",
                    avatarUrl = URI.create("https://example.com/avatar.png"),
                    primaryColor = "#ef1818"
                )
            )
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –ª–æ–≥–∞
     * –ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê
     */
    private fun getReactionsForLog(logId: UUID): List<ReactionView> {
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É —Ä–µ–∞–∫—Ü–∏—é
        return listOf(
            ReactionView(
                shortAccount = ShortAccountView(
                    userId = UUID.randomUUID(),
                    fullName = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                    avatarUrl = URI.create("https://example.com/avatar.png"),
                    roles = listOf(RoleEnum.STUDENT_SECOND),
                    primaryColor = "#533af9"
                ),
                emoji = "üëç"
            )
        )
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ª–æ–≥–∞
     * –ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê
     */
    private fun getCommentsForLog(logId: UUID): List<CommentView> {
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        val commentId1 = UUID.randomUUID()
        return listOf(
            CommentView(
                id = commentId1,
                message = "–û—Ç–ª–∏—á–Ω—ã–π –ª–æ–≥!",
                createdAt = java.time.OffsetDateTime.now().minusHours(1),
                updatedAt = java.time.OffsetDateTime.now().minusHours(1),
                shortAccount = ShortAccountView(
                    userId = UUID.randomUUID(),
                    fullName = "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
                    avatarUrl = URI.create("https://example.com/avatar2.png"),
                    roles = listOf(RoleEnum.STUDENT_SECOND),
                    primaryColor = "#ff8fe9"
                ),
                replyTo = null
            ),
            CommentView(
                id = UUID.randomUUID(),
                message = "–°–æ–≥–ª–∞—Å–µ–Ω!",
                createdAt = java.time.OffsetDateTime.now().minusMinutes(30),
                updatedAt = java.time.OffsetDateTime.now().minusMinutes(30),
                shortAccount = ShortAccountView(
                    userId = UUID.randomUUID(),
                    fullName = "–°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤",
                    avatarUrl = URI.create("https://example.com/avatar3.png"),
                    roles = listOf(RoleEnum.DEANERY),
                    primaryColor = "#533af9"
                ),
                replyTo = commentId1
            )
        )
    }
} 