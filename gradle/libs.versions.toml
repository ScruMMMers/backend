[versions]
spring-boot = "3.4.3"
kotlin = "1.9.25"
kotlin-coroutines = "1.9.0"
jooq = "3.19.18"
postgres = "42.7.5"
testcontainers = "1.20.4"
swagger = "2.2.27"
spring-kafka = "3.3.0"
jackson = "2.18.2"
keycloack = "26.1.3"
awssdk = "2.31.5"
apache-text = "1.10.0"

[plugins]
spring-plugin = { id = "org.springframework.boot", version.ref = "spring-boot" }
jooq-plugin = { id = "org.jooq.jooq-codegen-gradle", version = "3.19.18" }
openapi-generator-plugin = { id = "org.openapi.generator", version = "7.11.0" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.7" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring-plugin = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }

[libraries]
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version = "1.19.8" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
postgres = { module = "org.postgresql:postgresql", version.ref = "postgres" }
liquibase = { module = "org.liquibase:liquibase-core", version = "4.16.0" }

spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter", version.ref = "spring-boot" }
spring-boot-starter-jooq = { module = "org.springframework.boot:spring-boot-starter-jooq", version.ref = "spring-boot" }
spring-boot-starter-client = { module = "org.springframework.boot:spring-boot-starter-webflux", version.ref = "spring-boot" }
spring-websocket-starter = { module = "org.springframework.boot:spring-boot-starter-websocket", version.ref = "spring-boot" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

# coroutines
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlin-coroutines" }


# for swagger
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger" }
swagger-models = { module = "io.swagger.core.v3:swagger-models", version.ref = "swagger" }
validation-api = { module = "javax.validation:validation-api", version = "2.0.1.Final" }
javax-servlet-api = { module = "javax.servlet:javax.servlet-api", version = "4.0.1" }
javax-annotation-api = { module = "javax.annotation:javax.annotation-api", version = "1.3.2" }

# for kafka
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }

# jackson
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }

# test
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
junit = { module = "org.junit.jupiter:junit-jupiter", version = "5.10.0" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version = "1.12.0" }

#oauth2
security-oauth2-resource-server = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server", version.ref = "spring-boot" }
security-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client", version.ref = "spring-boot" }

# keycloak
keycloak-core = { module = "org.keycloak:keycloak-core", version.ref = "keycloack" }
keycloak-admin-client = { module = "org.keycloak:keycloak-admin-client", version = "26.0.4" }

#jpa
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot" }

# s3
amazon-bom = { module = "software.amazon.awssdk:bom", version.ref = "awssdk" }
amazon-s3 = { module = "software.amazon.awssdk:s3", version.ref = "awssdk" }
amazon-netty-nio-client = { module = "software.amazon.awssdk:netty-nio-client", version.ref = "awssdk" }
amazon-s3control = { module = "software.amazon.awssdk:s3control", version.ref = "awssdk" }
amazon-s3-transfer-manager = { module = "software.amazon.awssdk:s3-transfer-manager", version.ref = "awssdk" }
amazon-apache-client = { module = "software.amazon.awssdk:apache-client", version.ref = "awssdk" }

#email
email-api = { module = "org.springframework.boot:spring-boot-starter-mail", version.ref = "spring-boot" }

#LevenshteinDistance
apache-text = { module = "org.apache.commons:commons-text", version.ref = "apache-text"}
